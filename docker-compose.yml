version: '3.9'

services:
  # Serviço do PostgreSQL
  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/scripts:/docker-entrypoint-initdb.d
    networks:
      - app-network

  # Serviço do Backend (Spring Boot)
  backend:
    build:
      context: ./backend
    container_name: springboot_backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_PROFILES_ACTIVE: dev
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    depends_on:
      - db
    ports:
      - "8080:8080"
    networks:
      - app-network

  # Serviço do Frontend (React)
  frontend:
    build:
      context: ./frontend
    container_name: vite_frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
    command: ["npm", "run", "dev"]
    networks:
      - app-network

  # Serviço do NGINX Proxy Manager
  npm:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx_proxy_manager
    restart: unless-stopped
    ports:
      - "80:80"
      - "81:81"
      - "443:443"
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt
    networks:
      - app-network

volumes:
  db_data:
  npm_data:
  npm_letsencrypt:
  
networks:
  app-network:
    driver: bridge
